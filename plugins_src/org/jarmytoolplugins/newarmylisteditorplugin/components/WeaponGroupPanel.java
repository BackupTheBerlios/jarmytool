/*
 * WeaponGroupPanel.java
 *
 * Created on 18 October 2003, 22:06
 */

package org.jarmytoolplugins.newarmylisteditorplugin.components;

import java.awt.Font;
import java.awt.event.MouseAdapter;
import java.util.Collection;
import java.util.Collections;
import java.util.Iterator;
import java.util.LinkedList;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JLabel;
import javax.swing.JPanel;

import org.jArmyTool.data.dataBeans.armylist.ArmylistWeapon;
import org.jArmyTool.internaldata.GUICommands;
import org.jarmytoolplugins.newarmylisteditorplugin.util.VerticalFlowLayout;

/**
 *
 * @author  pasi
 */
public class WeaponGroupPanel extends javax.swing.JPanel {
    
    private static final String SELECT = "Add";
    
    private String name;
    private Collection weapons;
    private DefaultComboBoxModel model;
    
    private LinkedList selectedWeapons;
    private Collection defaultSelected;
    
    private String updateName;
    
    private ArmylistWeapon nameMatchWeapon;
    
    private boolean hasGuess = false;
    
    private boolean reactToChange = false;
    
    /** Creates new form WeaponGroupPanel */
    
    public WeaponGroupPanel(String name, Collection weapons, Collection defaultSelected, String updateName) {
        this.updateName = updateName.toLowerCase();
        this.selectedWeapons = new LinkedList();
        this.defaultSelected = defaultSelected;
        this.name = name;
        this.weapons = weapons;
        
        initComponents();
        this.selectedPanel.setLayout(new VerticalFlowLayout());
        
        this.initCombo();
        
        this.initDefaults();
        
    }
    
    private void initDefaults(){
        Iterator iterator = this.defaultSelected.iterator();
        while(iterator.hasNext()){
            this.addWeapon( ((ArmylistWeapon)iterator.next()).getName() );
        }
    }
    
    private void initCombo(){
        this.model = new DefaultComboBoxModel();
        
        this.model.addElement(SELECT);

        Iterator iterator = this.weapons.iterator();
        while(iterator.hasNext()){
            ArmylistWeapon temp = ((ArmylistWeapon)iterator.next());
            this.model.addElement( temp.getName() );
            String tempLower = temp.getName().toLowerCase();
            if(this.updateName.indexOf(tempLower) != -1){
                this.nameMatchWeapon = temp;
                //System.out.println("match found: wep: "+temp.getName() +" and upd: "+this.updateName);
            }
        }
        
       this.box.setModel(this.model);
            
/*        if(this.nameMatchWeapon != null){
            this.model.setSelectedItem(this.nameMatchWeapon);
        }*/
       
       reactToChange = true;
    }
    
    
    public Collection getSelectedWeapons(){
        return Collections.unmodifiableCollection(this.selectedWeapons);
    }
    
   private void addWeapon(final String weaponName){
       if(SELECT == weaponName)
           return;
       
       reactToChange = false;
       
       final JLabel weaponLabel = new JLabel(weaponName);
       this.selectedWeapons.add(weaponName);
       weaponLabel.addMouseListener(new MouseAdapter(){
                    public void mouseExited(java.awt.event.MouseEvent evt) {
                        weaponLabel.setFont(new Font(weaponLabel.getFont().getName(), Font.PLAIN, weaponLabel.getFont().getSize()));
                    }
                    public void mouseEntered(java.awt.event.MouseEvent evt) {
                        weaponLabel.setFont(new Font(weaponLabel.getFont().getName(), Font.BOLD, weaponLabel.getFont().getSize()));
                    }        
                    public void mouseClicked(java.awt.event.MouseEvent evt) {
                        removeWeapon(weaponName, weaponLabel);
                    }                
                });
       weaponLabel.setCursor(GUICommands.getInstance().getXCursor());         
       
       this.selectedPanel.add(weaponLabel);
       this.selectedPanel.updateUI();
       
       this.model.removeElement(weaponName);
       this.model.setSelectedItem(SELECT);
       
       reactToChange = true;
   }
   
   private void removeWeapon(String weaponName, JLabel weaponLabel){
       reactToChange = false;
       
       this.selectedWeapons.remove(weaponName);
       this.selectedPanel.remove(weaponLabel);
       this.selectedPanel.updateUI();
       this.model.addElement(weaponName);
       
       reactToChange = true;
   }
 
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        comboPanel = new javax.swing.JPanel();
        box = new javax.swing.JComboBox();
        selectedPanel = new javax.swing.JPanel();

        setLayout(new java.awt.BorderLayout());

        comboPanel.setLayout(new java.awt.BorderLayout());

        box.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                boxItemStateChanged(evt);
            }
        });

        comboPanel.add(box, java.awt.BorderLayout.NORTH);

        add(comboPanel, java.awt.BorderLayout.NORTH);

        add(selectedPanel, java.awt.BorderLayout.CENTER);

    }//GEN-END:initComponents

    private void boxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_boxItemStateChanged
        if(this.reactToChange){
            this.addWeapon((String)this.box.getSelectedItem());
        }
    }//GEN-LAST:event_boxItemStateChanged
    

    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox box;
    private javax.swing.JPanel comboPanel;
    private javax.swing.JPanel selectedPanel;
    // End of variables declaration//GEN-END:variables
    
}
