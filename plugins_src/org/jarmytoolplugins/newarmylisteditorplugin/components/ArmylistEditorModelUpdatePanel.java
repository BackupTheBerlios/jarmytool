/*
 * ArmylistEditorModelUpdatePanel.java
 *
 * Created on 28 October 2003, 00:25
 */

package org.jarmytoolplugins.newarmylisteditorplugin.components;

import java.util.Iterator;
import java.util.Map.Entry;
import org.jArmyTool.data.dataBeans.armylist.ArmylistModelUpdate;
import org.jArmyTool.data.dataBeans.armylist.ArmylistWeapon;
import org.jArmyTool.internaldata.GUICommands;

/**
 *
 * @author  pasi
 */
public class ArmylistEditorModelUpdatePanel extends javax.swing.JPanel {
    
    private ArmylistModelUpdate update;
    private ArmylistEditorModelPanel modelPanel;
    private WeaponPanel weaponPanel;
    private StatPanel statPanel;
    
    /** Creates new form ArmylistEditorModelUpdatePanel */
    public ArmylistEditorModelUpdatePanel(ArmylistModelUpdate update, ArmylistEditorModelPanel modelPanel) {
        this.modelPanel = modelPanel;
        this.update = update;
        initComponents();
        this.initData();
        
        this.moveDownButton.setIcon(GUICommands.getInstance().getMovedDownArrow());
        this.moveUpButton.setIcon(GUICommands.getInstance().getMoveUpArrow());        
    }
    
    private void initData(){
        this.nameField.setText(this.update.getName());
        
        if(this.update.getPointcost() == (int)this.update.getPointcost()){
            this.pointcostField.setText(""+(int)this.update.getPointcost());
        }else{
            this.pointcostField.setText(""+this.update.getPointcost());
        }
        
        
        this.pointcostPerModelCheckbox.setSelected(this.update.isPointcostPerModel());
        this.minCounterSpinner.setValue(new Integer(this.update.getMinCount()));
        this.maxCounterSpinner.setValue(new Integer(this.update.getMaxCount()));
        this.defaultCounterSpinner.setValue(new Integer(this.update.getDefaultCount()));
        
        if(!this.update.getWeapons().isEmpty()){
            this.showWeaponList();
        }
        
        if(!this.update.getStatModifications().isEmpty())
        {
            this.showUpdateSelector();
        }
    }
    
    public void saveData(){
        this.update.setName(this.nameField.getText());
        try{
            this.update.setPointcost(Double.parseDouble(this.pointcostField.getText()));
        }catch(NumberFormatException e){}

        this.update.setPointcostPerModel(this.pointcostPerModelCheckbox.isSelected());
        
        this.update.setMinCount( ((Integer)this.minCounterSpinner.getValue()).intValue() );
        this.update.setMaxCount( ((Integer)this.maxCounterSpinner.getValue()).intValue() );
        this.update.setDefaultCount( ((Integer)this.defaultCounterSpinner.getValue()).intValue() );
        
        if(this.weaponPanel != null){
            this.update.emptyWeapons();
            Iterator iterator = this.weaponPanel.getSelectedWeapons().iterator();
            while(iterator.hasNext()){
                this.update.addWeapon((String)iterator.next());
            }            
        }
        if(this.statPanel == null)
            return;
            this.update.addStatModification(this.statPanel.modifications());      
    }
    
    public ArmylistModelUpdate getModelUpdate()
    {
        return this.update;
    }
    
    public void removeUpdateSelector()
    {
        this.updatePanelPanel.removeAll();
        this.statPanel = null;
        this.updatePanelPanel.add(this.isStatUpdatePanel);
        this.updatePanelPanel.updateUI();
    }
    
    private void showUpdateSelector()
    {
        this.updatePanelPanel.remove(this.isStatUpdatePanel);
        this.statPanel = new StatPanel(this, this.modelPanel.getArmylistArmy(), this.modelPanel.getModel());
        
        if(!this.update.getStatModifications().isEmpty())
        {
            Iterator i = this.update.getStatModifications().entrySet().iterator();
            while(i.hasNext())
            {
                Entry e = ((Entry)i.next());
                this.statPanel.addStatPanel(((String)e.getKey()), ((String)e.getValue()));
            }
        }
        else
            this.statPanel.addStatPanel();
        
        this.updatePanelPanel.add(this.statPanel);
        this.updatePanelPanel.updateUI();
    }
    
    private void showWeaponList(){
        this.weaponPanelPanel.remove(this.isWeaponBoxPanel);
        this.weaponPanel = new WeaponPanel( this.modelPanel.getArmylistArmy(), this.update.getWeapons(), this.update.getName());
        this.weaponPanelPanel.add(this.weaponPanel);
        this.weaponPanelPanel.updateUI();
    }
    
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        java.awt.GridBagConstraints gridBagConstraints;

        dataPanel = new javax.swing.JPanel();
        nameField = new javax.swing.JTextField();
        minCounterSpinner = new javax.swing.JSpinner();
        maxCounterSpinner = new javax.swing.JSpinner();
        defaultCounterSpinner = new javax.swing.JSpinner();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        pointcostField = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        pointcostPerModelCheckbox = new javax.swing.JCheckBox();
        delButton = new javax.swing.JButton();
        moveButtonsPanel = new javax.swing.JPanel();
        moveUpButton = new javax.swing.JButton();
        moveDownButton = new javax.swing.JButton();
        weaponPanelPanel = new javax.swing.JPanel();
        isWeaponBoxPanel = new javax.swing.JPanel();
        isWeaponCheckBox = new javax.swing.JCheckBox();
        updatePanelPanel = new javax.swing.JPanel();
        isStatUpdatePanel = new javax.swing.JPanel();
        isStatCheckBox = new javax.swing.JCheckBox();

        setLayout(new javax.swing.BoxLayout(this, javax.swing.BoxLayout.Y_AXIS));

        setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0)));
        dataPanel.setLayout(new java.awt.GridBagLayout());

        nameField.setText("jTextField1");
        nameField.setMaximumSize(new java.awt.Dimension(200, 23));
        nameField.setMinimumSize(new java.awt.Dimension(200, 23));
        nameField.setPreferredSize(new java.awt.Dimension(200, 23));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        dataPanel.add(nameField, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        dataPanel.add(minCounterSpinner, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        dataPanel.add(maxCounterSpinner, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        dataPanel.add(defaultCounterSpinner, gridBagConstraints);

        jLabel1.setText("min");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        dataPanel.add(jLabel1, gridBagConstraints);

        jLabel2.setText("max");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        dataPanel.add(jLabel2, gridBagConstraints);

        jLabel3.setText("default");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 4);
        dataPanel.add(jLabel3, gridBagConstraints);

        pointcostField.setText("jTextField1");
        pointcostField.setMaximumSize(new java.awt.Dimension(30, 23));
        pointcostField.setMinimumSize(new java.awt.Dimension(30, 23));
        pointcostField.setPreferredSize(new java.awt.Dimension(30, 23));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 1;
        dataPanel.add(pointcostField, gridBagConstraints);

        jLabel4.setText("points");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 0;
        dataPanel.add(jLabel4, gridBagConstraints);

        pointcostPerModelCheckbox.setText("per model");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 1;
        dataPanel.add(pointcostPerModelCheckbox, gridBagConstraints);

        delButton.setText("del");
        delButton.setMargin(new java.awt.Insets(2, 2, 2, 2));
        delButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                delButtonActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 7;
        gridBagConstraints.gridy = 1;
        dataPanel.add(delButton, gridBagConstraints);

        moveButtonsPanel.setLayout(new java.awt.GridBagLayout());

        moveUpButton.setMaximumSize(new java.awt.Dimension(35, 35));
        moveUpButton.setMinimumSize(new java.awt.Dimension(35, 35));
        moveUpButton.setPreferredSize(new java.awt.Dimension(35, 35));
        moveUpButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                moveUpButtonActionPerformed(evt);
            }
        });

        moveButtonsPanel.add(moveUpButton, new java.awt.GridBagConstraints());

        moveDownButton.setMaximumSize(new java.awt.Dimension(35, 35));
        moveDownButton.setMinimumSize(new java.awt.Dimension(35, 35));
        moveDownButton.setPreferredSize(new java.awt.Dimension(35, 35));
        moveDownButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                moveDownButtonActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        moveButtonsPanel.add(moveDownButton, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridheight = 2;
        dataPanel.add(moveButtonsPanel, gridBagConstraints);

        add(dataPanel);

        weaponPanelPanel.setLayout(new java.awt.BorderLayout());

        isWeaponCheckBox.setText("is weapon");
        isWeaponCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                isWeaponCheckBoxActionPerformed(evt);
            }
        });

        isWeaponBoxPanel.add(isWeaponCheckBox);

        weaponPanelPanel.add(isWeaponBoxPanel, java.awt.BorderLayout.CENTER);

        add(weaponPanelPanel);

        isStatCheckBox.setText("is stat update");
        isStatCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                isStatCheckBoxActionPerformed(evt);
            }
        });

        isStatUpdatePanel.add(isStatCheckBox);

        updatePanelPanel.add(isStatUpdatePanel);

        add(updatePanelPanel);

    }//GEN-END:initComponents

    private void isStatCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_isStatCheckBoxActionPerformed
       this.saveData();
       this.showUpdateSelector();
    }//GEN-LAST:event_isStatCheckBoxActionPerformed

    private void moveDownButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_moveDownButtonActionPerformed
        this.modelPanel.moveUpdateDown(this);
    }//GEN-LAST:event_moveDownButtonActionPerformed

    private void moveUpButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_moveUpButtonActionPerformed
        this.modelPanel.moveUpdateUp(this);
    }//GEN-LAST:event_moveUpButtonActionPerformed

    private void isWeaponCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_isWeaponCheckBoxActionPerformed
        this.saveData();
        this.showWeaponList();
    }//GEN-LAST:event_isWeaponCheckBoxActionPerformed

    private void delButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_delButtonActionPerformed
        this.modelPanel.removeModelUpdate(this);
    }//GEN-LAST:event_delButtonActionPerformed
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel dataPanel;
    private javax.swing.JSpinner defaultCounterSpinner;
    private javax.swing.JButton delButton;
    private javax.swing.JCheckBox isStatCheckBox;
    private javax.swing.JPanel isStatUpdatePanel;
    private javax.swing.JPanel isWeaponBoxPanel;
    private javax.swing.JCheckBox isWeaponCheckBox;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JSpinner maxCounterSpinner;
    private javax.swing.JSpinner minCounterSpinner;
    private javax.swing.JPanel moveButtonsPanel;
    private javax.swing.JButton moveDownButton;
    private javax.swing.JButton moveUpButton;
    private javax.swing.JTextField nameField;
    private javax.swing.JTextField pointcostField;
    private javax.swing.JCheckBox pointcostPerModelCheckbox;
    private javax.swing.JPanel updatePanelPanel;
    private javax.swing.JPanel weaponPanelPanel;
    // End of variables declaration//GEN-END:variables
    
}

