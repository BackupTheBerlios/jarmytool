<?xml version="1.0" encoding="UTF-8"?>
<!-- Written to assume that classpath is rooted in the current directory. -->
<!-- So this should be OK if you make this script in the root of a filesystem. -->
<!-- If not, you may prefer to adjust the basedir, or move some directories around. -->
<!-- The idea is that both Ant and NetBeans have to know what the package root is -->
<!-- for the classes in your application. -->
<project basedir="." default="compile" name="jArmytool">



  <!-- global properties for this build -->
  <property name="app.name" value="jArmyTool"/>
  <property name="src.dir" value="../src"/>
  <property name="plugins.src.dir" value="../../plugins_src"/>
  
  <property name="build.dir" value="../classes"/>
  <property name="plugins.build.dir" value="../plugins-classes"/>
  
  <property name="lib.dir" value="../lib"/>
  <property name="plugins.lib.dir" value="../plugins-lib"/>
  
  <property name="javadoc.dir" value="../doc/javadoc"/>
  <property name="dist.dir" value="../dist"/>
  <property name="plugins.dist.dir" value="../src/plugins"/>
  
  <property name="installer.dir" value="../installer"/>

  <property name="conf.dir" value="config"/>
  <property name="jArmyTool.dir" value="org/jArmyTool"/>
  
  
  <property name="jar.name" value="jArmyTool.jar"/>
  <property name="plugins.jar.name" value="corePlugins.jar"/>
  
  <property name="installer.name" value="jArmyToolInstaller.jar"/>
  <property name="patch.name" value="jArmyToolPatchInstaller.jar"/>
  <property name="installer.name.noSource" value="jArmyToolInstaller.jar"/>
  <property name="user.name" value="Pasi LehtimÃ¤ki"/>
  <property name="main-class.name" value="org.jArmyTool.gui.engine.GUICore"/>  
  
  <property name="IzPackBasedir" value="../../../IzPack"/>
  
  <!-- default classpath -->
  <path id="cpath.default">
    <pathelement location="${build.dir}"/>
    <pathelement location="${lib.dir}/skinlf.jar"/>
    <pathelement location="${lib.dir}/helpgui-1.0.jar"/>
    <pathelement location="${lib.dir}/log4j-1.2.8.jar"/>
  </path>  
  
<!-- Allows us to use the IzPack Ant task -->
<taskdef name="izpack" classpath="${IzPackBasedir}/lib/compiler.jar"
         classname="com.izforge.izpack.ant.IzPackTask"/>
    
  <!-- **************************************************** common targets -->
  
  <!-- Initialize common resources -->
  <target name="init" description="Initialize common resources">
    <mkdir dir="${build.dir}"/>
    <mkdir dir="${plugins.build.dir}"/>
    <mkdir dir="${javadoc.dir}"/>
    <mkdir dir="${dist.dir}"/>
  </target>
  
  <!-- delete all compiled classes -->
  <target name="clean.classes" description="Delete all compiled classes">
    <delete includeEmptyDirs="true" failonerror="false">
      <fileset dir="${build.dir}" />
    </delete>
  </target>
  
  <target name="plugins.clean.classes" description="Delete all compiled classes in plugin dir">
    <delete includeEmptyDirs="true" failonerror="false">
      <fileset dir="${plugins.build.dir}" />
    </delete>
  </target>  
  
  
  <target name="clean.dist" description="Delete all distribution files">
    <delete includeEmptyDirs="true" failonerror="false">
      <fileset dir="${dist.dir}" />
    </delete>
  </target>
  
  <!-- ********************************************* targets for compiling -->

  <!-- Compile uncompiled Java sources -->
  <target name="compile" depends="init" 
	  description="Compile uncompiled Java sources">
    <javac srcdir="${src.dir}:"
           destdir="${build.dir}"
           classpathref="cpath.default"
                 deprecation="on"
                 includes="**"
                 debug="on"/>
    <copy todir="${build.dir}/help" >
        <fileset dir="../src/help"/>
    </copy>
   
  </target>
  
  <target name="plugins.compile" depends="init, compile" 
	  description="Compile uncompiled Java sources">
    <javac srcdir="${plugins.src.dir}:"
           destdir="${plugins.build.dir}"
           classpathref="cpath.default"
                 deprecation="on"
                 includes="**"
                 debug="on"/>
  </target>  
  
  <!-- Recompile all sources even if they are up-to-date -->
  <target name="recompile" depends="clean.classes, compile"
    description="Recompile all sources even if they are up-to-date"/>
    
  <target name="plugins.recompile" depends="plugins.clean.classes, plugins.compile"
    description="Recompile all sources even if they are up-to-date"/>    
    
  <!-- ****************************** targets for generating documentation -->

  <!-- create javadoc -->
  <target name="javadoc" depends="init"
    description="Create Javadoc API documentation">
    <javadoc packagenames="org.jArmyTool.*"
      sourcepath="${src.dir}"
      destdir="${javadoc.dir}"
      classpathref="cpath.default"
      author="true"
      version="true"
      Windowtitle="Java API documentation for jArmyTool"/>
  </target>            

  <!-- ************************* targets for generating distribution files -->

  <!-- Generates JAR -->
  <target name="jar" depends="clean.dist, compile"
          description="Generates JAR">
    <jar jarfile="${dist.dir}/${jar.name}">
      <fileset dir="${build.dir}"/>
    <manifest >
    <attribute name="Built-By" value="${user.name}"/>
    <attribute name="Main-Class" value="${main-class.name}"/>
    <attribute name="Class-Path" value="lib/skinlf.jar lib/nativeskin.jar lib/helpgui-1.0.jar lib/log4j-1.2.8.jar"/>
  </manifest>
      
    </jar>
  </target>  
  
   <target name="plugins.jar" depends="plugins.compile"
          description="Generates JAR for plugins">   
    <jar jarfile="${plugins.dist.dir}/${plugins.jar.name}">
      <fileset dir="${plugins.build.dir}"/>
      
    <manifest >
        <attribute name="Built-By" value="${user.name}"/>
    </manifest> 
         
    </jar>
  </target>   
  
<!-- Creates installer -->
<target name="installer" depends="jar"
          description="Creates Installer">
<echo message="Makes the installer using IzPack"/>
<izpack input="${installer.dir}/jArmyToolInstaller.xml"
        output="${dist.dir}/${installer.name}"
        installerType="standard-kunststoff"
        basedir="${installer.dir}"
        izPackDir="${IzPackBasedir}/"/>  
</target>    

<target name="installerNosource" depends="jar"
          description="Creates Installer">
<echo message="Makes the installer using IzPack"/>
<izpack input="${installer.dir}/jArmyToolInstallerNoSource.xml"
        output="${dist.dir}/${installer.name.noSource}"
        installerType="standard-kunststoff"
        basedir="${installer.dir}"
        izPackDir="${IzPackBasedir}/"/>  
</target>    


 
<target name="installerPubNosource" depends="jar"
          description="Creates Installer">
<echo message="Makes the installer using IzPack"/>
<izpack input="${installer.dir}/jArmyToolInstallerPublicNoSource.xml"
        output="${dist.dir}/${installer.name.noSource}"
        installerType="standard-kunststoff"
        basedir="${installer.dir}"
        izPackDir="${IzPackBasedir}/"/>  
</target>    

<target name="patchInstaller" depends="jar"
          description="Creates Installer">
<echo message="Makes the patch installer using IzPack"/>
<izpack input="${installer.dir}/jArmyToolPatch.xml"
        output="${dist.dir}/${patch.name}"
        installerType="standard-kunststoff"
        basedir="${installer.dir}"
        izPackDir="${IzPackBasedir}/"/>  
</target>    


<target name="zip">

  <zip destfile="${dist.dir}/jArmyTool.zip">
    <fileset dir="." includes="${dist.dir}/jArmyToolInstaller.jar"/>
    <fileset dir="." includes="../installer/install.bat"/>
  </zip>
    
</target>
       
</project>
